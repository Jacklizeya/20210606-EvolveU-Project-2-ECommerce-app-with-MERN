{"ast":null,"code":"var _jsxFileName = \"/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/src/screens/ProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userAction\";\nimport FormContainer from \"../components/FormContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProfileScreen({\n  location,\n  history\n}) {\n  _s();\n\n  //  This is going to focus on using local state\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(null); // Check if use is logged in\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin; // This is the main global state for this component: userDetails\n\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  useEffect(() => {\n    console.log(\"the profile screen\");\n\n    if (!userInfo) {\n      console.log(\"unlogin status\");\n      history.push(\"/login\");\n    } // if the user did not login, then go to the main page\n    else {\n        console.log(\"login status\");\n\n        if (!user.name) {\n          console.log(\"there is nothing in userDetails.user.name after 1st login, I am going to get it now\");\n          dispatch(getUserDetails(\"profile\"));\n        } // when we just login details is empty always, we need to initialize the details\n        else {\n            console.log(\"after first login, I have all the information I need now, I am able to put the informaiton in\");\n            setName(user.name);\n            setEmail(user.email);\n          }\n      }\n  }, [dispatch, history, userInfo, user]);\n\n  const submitHandler = e => {\n    e.preventDefault(); // dispatch(register(name, email, password))\n\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match\");\n    } else {\n      // DISPATCH UPDATE PROFILE\n      dispatch;\n    }\n  }; //  all stuff inside is the children\n\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      md: 3,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" User Profile \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [message && /*#__PURE__*/_jsxDEV(Message, {\n          variant: \"danger\",\n          children: [\" \", message, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Name \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => {\n              setName(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Email Address \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => {\n              setEmail(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" password  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter password\",\n            value: password,\n            onChange: e => {\n              setPassword(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"confirmPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" confirm Password  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"confirmPassword\",\n            placeholder: \"Enter confirmPassword\",\n            value: confirmPassword,\n            onChange: e => {\n              setConfirmPassword(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \" Update \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      md: 9,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" My orders \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProfileScreen, \"SbHgLGZozTnM9rlCIxk08icpxjI=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n\n_c = ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"sources":["/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/src/screens/ProfileScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","Row","Col","useDispatch","useSelector","Message","Loader","getUserDetails","updateUserProfile","FormContainer","ProfileScreen","location","history","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","userLogin","state","userInfo","dispatch","userDetails","loading","error","user","console","log","push","submitHandler","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {Link} from \"react-router-dom\"\nimport {Form, Button, Row, Col} from \"react-bootstrap\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport Message from \"../components/Message\"\nimport Loader from \"../components/Loader\"\nimport {getUserDetails, updateUserProfile} from \"../actions/userAction\"\nimport FormContainer from \"../components/FormContainer\"\n\nexport default function ProfileScreen( {location, history} ) {\n//  This is going to focus on using local state\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [message, setMessage] = useState(null)\n\n\n\n    // Check if use is logged in\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    // This is the main global state for this component: userDetails\n    const dispatch = useDispatch()\n    const userDetails = useSelector(state => state.userDetails)\n    const {loading, error, user} = userDetails\n\n\n    useEffect(()=>{\n        console.log(\"the profile screen\")\n        if (!userInfo) {\n            console.log(\"unlogin status\")\n            history.push(\"/login\")}  // if the user did not login, then go to the main page\n        else { \n            console.log(\"login status\")\n            if(! user.name) {\n                console.log(\"there is nothing in userDetails.user.name after 1st login, I am going to get it now\"); \n                dispatch(getUserDetails(\"profile\"))}  // when we just login details is empty always, we need to initialize the details\n            else {\n                console.log(\"after first login, I have all the information I need now, I am able to put the informaiton in\")\n                setName(user.name); setEmail(user.email)\n            }\n        }\n    }, [dispatch, history, userInfo, user])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        // dispatch(register(name, email, password))\n        if (password !== confirmPassword) {setMessage(\"Passwords do not match\")} else {\n            // DISPATCH UPDATE PROFILE\n            dispatch\n        }\n    }\n\n//  all stuff inside is the children\n    return (\n        <Row>\n            <Col md={3}> \n                <h2> User Profile </h2>\n                <div>\n                    {message && <Message variant=\"danger\"> {message} </Message>}\n                    {loading && <Loader/>}\n                </div>\n                \n                <Form onSubmit = {submitHandler} >\n\n                    <Form.Group controlId=\"name\">\n                        <Form.Label> Name </Form.Label>\n                        <Form.Control type=\"name\" placeholder=\"Enter name\" value={name} onChange={(e)=>{setName(e.target.value)}}/> \n                    </Form.Group> \n\n                    <Form.Group controlId=\"email\">\n                        <Form.Label> Email Address </Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" value={email} onChange={(e)=>{setEmail(e.target.value)}}/> \n                    </Form.Group> \n\n                    <Form.Group controlId=\"password\">\n                        <Form.Label> password  </Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Enter password\" value={password} onChange={(e)=>{setPassword(e.target.value)}}/> \n                    </Form.Group>  \n\n                    <Form.Group controlId=\"confirmPassword\">\n                        <Form.Label> confirm Password  </Form.Label>\n                        <Form.Control type=\"confirmPassword\" placeholder=\"Enter confirmPassword\" value={confirmPassword} onChange={(e)=>{setConfirmPassword(e.target.value)}}/> \n                    </Form.Group>\n\n                    <Button type=\"submit\" variant=\"primary\"> Update </Button>\n                </Form>\n            </Col>\n            <Col md={9}> \n                <h2> My orders </h2> \n            </Col>\n        </Row>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}