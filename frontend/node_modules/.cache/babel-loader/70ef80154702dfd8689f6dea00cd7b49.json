{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_REQEUST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT } from \"../constants/userConstant\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    // Initiate request\n    dispatch({\n      type: USER_LOGIN_REQEUST\n    }); // Make real request to database\n\n    const {\n      data\n    } = await axios.post(\"api/users/login\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"UserInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    // Initiate request\n    dispatch({\n      type: USER_REGISTER_REQEUST\n    }); // Make real request to database\n\n    const {\n      data\n    } = await axios.post(\"api/users/REGISTER\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"UserInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/src/actions/userAction.js"],"names":["axios","USER_LOGIN_REQEUST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","login","email","password","dispatch","type","data","post","headers","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","USER_REGISTER_REQEUST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,eAAjD,EAAkEC,WAAlE,QAAqF,2BAArF;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC1D,MAAI;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR,CAFA,CAGA;;AACA,UAAM;AAACS,MAAAA;AAAD,QAAS,MAAMV,KAAK,CAACW,IAAN,CAAW,iBAAX,EAA8B;AAACL,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA9B,EAAiD;AAACK,MAAAA,OAAO,EAAG;AAAC,wBAAgB;AAAjB;AAAX,KAAjD,CAArB;AACAJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,kBAAR;AAA4BW,MAAAA,OAAO,EAAGH;AAAtC,KAAD,CAAR;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACH,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEN,eAAP;AAAwBU,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,OAAtC,GACpCF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,OADgB,GAEpCF,KAAK,CAACE;AAFH,KAAD,CAAR;AAGH;AACJ,CAbM;AAeP,OAAO,MAAMC,MAAM,GAAG,MAAO,MAAOb,QAAP,IAAoB;AAC7CM,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAd,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMmB,QAAQ,GAAG,CAACC,IAAD,EAAOlB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACnE,MAAI;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEgB;AAAR,KAAD,CAAR,CAFA,CAGA;;AACA,UAAM;AAACf,MAAAA;AAAD,QAAS,MAAMV,KAAK,CAACW,IAAN,CAAW,oBAAX,EAAiC;AAACL,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAjC,EAAoD;AAACK,MAAAA,OAAO,EAAG;AAAC,wBAAgB;AAAjB;AAAX,KAApD,CAArB;AACAJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEiB,qBAAR;AAA+Bb,MAAAA,OAAO,EAAGH;AAAzC,KAAD,CAAR;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjC;AACH,GAPD,CAOE,OAAOQ,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEkB,kBAAP;AAA2Bd,MAAAA,OAAO,EAAEK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,OAAtC,GACvCF,KAAK,CAACC,QAAN,CAAeT,IAAf,CAAoBU,OADmB,GAEvCF,KAAK,CAACE;AAFH,KAAD,CAAR;AAGH;AACJ,CAbM","sourcesContent":["import axios from \"axios\"\nimport { USER_LOGIN_REQEUST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT } from \"../constants/userConstant\"\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        // Initiate request\n        dispatch({ type: USER_LOGIN_REQEUST })\n        // Make real request to database\n        const {data} = await axios.post(\"api/users/login\", {email, password}, {headers : {\"Content-Type\": \"application/json\"}} )\n        dispatch({ type: USER_LOGIN_SUCCESS, payload : data})\n        localStorage.setItem(\"UserInfo\", JSON.stringify(data))\n    } catch (error) {\n        dispatch({type: USER_LOGIN_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\nexport const logout = ( ) => async (dispatch) => {\n    localStorage.removeItem(\"userInfo\")\n    dispatch({type: USER_LOGOUT})\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try {\n        // Initiate request\n        dispatch({ type: USER_REGISTER_REQEUST })\n        // Make real request to database\n        const {data} = await axios.post(\"api/users/REGISTER\", {email, password}, {headers : {\"Content-Type\": \"application/json\"}} )\n        dispatch({ type: USER_REGISTER_SUCCESS, payload : data})\n        localStorage.setItem(\"UserInfo\", JSON.stringify(data))\n    } catch (error) {\n        dispatch({type: USER_REGISTER_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}"]},"metadata":{},"sourceType":"module"}