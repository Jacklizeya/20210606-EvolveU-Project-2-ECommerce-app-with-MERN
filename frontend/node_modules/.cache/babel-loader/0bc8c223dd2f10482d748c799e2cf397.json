{"ast":null,"code":"import _toConsumableArray from\"/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CART_ADD_ITEM,CART_REMOVE_ITEM,CART_SAVE_SHIPPING_ADDRESS,CART_SAVE_PAYMENT_METHOD}from\"../constants/cartConstants\";// This cartReducer didnot deal with Server and backend\nexport var cartReducer=function cartReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{cartItems:[],shippingAddress:{}};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case CART_ADD_ITEM:{var item=action.payload;// this contains the information about what I want to buy\n// this contains the information about what I have in the cart already\nvar existItem=state.cartItems.find(function(x){return x.product===item.product;});//          return the first item that matches the criteria\nif(existItem){return _objectSpread(_objectSpread({},state),{},{cartItems:state.cartItems.map(function(x){return x.product===item.product?item:x;})});// replace with payload or use the old one\n}else{return _objectSpread(_objectSpread({},state),{},{cartItems:[].concat(_toConsumableArray(state.cartItems),[item])});}}case CART_REMOVE_ITEM:{return _objectSpread(_objectSpread({},state),{},{cartItems:state.cartItems.filter(function(x){return x.product!==action.payload;})});}case CART_SAVE_SHIPPING_ADDRESS:{return _objectSpread(_objectSpread({},state),{},{shippingAddress:action.payload});}case CART_SAVE_PAYMENT_METHOD:{return _objectSpread(_objectSpread({},state),{},{paymentMethod:action.payload});}default:return state;}};","map":{"version":3,"sources":["/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/src/reducers/cartReducer.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter","paymentMethod"],"mappings":"yYAAA,OAAQA,aAAR,CAAuBC,gBAAvB,CAAyCC,0BAAzC,CAAqEC,wBAArE,KAAoG,4BAApG,CAEA;AAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAA4D,IAA3DC,CAAAA,KAA2D,2DAAnD,CAACC,SAAS,CAAE,EAAZ,CAAgBC,eAAe,CAAG,EAAlC,CAAmD,IAAXC,CAAAA,MAAW,2CACnF,OAAOA,MAAM,CAACC,IAAd,EACI,IAAKT,CAAAA,aAAL,CAAwB,CACpB,GAAMU,CAAAA,IAAI,CAAGF,MAAM,CAACG,OAApB,CAA6B;AAC7B;AACA,GAAMC,CAAAA,SAAS,CAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CAAqB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAF,GAAcL,IAAI,CAACK,OAAvB,EAAtB,CAAlB,CACZ;AACY,GAAIH,SAAJ,CAAe,CACX,sCAAWP,KAAX,MACIC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAoB,SAAAF,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAF,GAAcL,IAAI,CAACK,OAAnB,CAA4BL,IAA5B,CAAmCI,CAAvC,EAArB,CADf,GACgF;AACnF,CAHD,IAGO,CAAC,sCAAWT,KAAX,MAAkBC,SAAS,8BAAMD,KAAK,CAACC,SAAZ,GAAuBI,IAAvB,EAA3B,GAAyD,CAEpE,CACD,IAAKT,CAAAA,gBAAL,CAAwB,CACpB,sCAAWI,KAAX,MAAkBC,SAAS,CAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuB,SAAAH,CAAC,QAAIA,CAAAA,CAAC,CAACC,OAAF,GAAcP,MAAM,CAACG,OAAzB,EAAxB,CAA7B,GACH,CACD,IAAKT,CAAAA,0BAAL,CAAkC,CAC9B,sCAAWG,KAAX,MAAkBE,eAAe,CAAEC,MAAM,CAACG,OAA1C,GACH,CACD,IAAKR,CAAAA,wBAAL,CAAgC,CAC5B,sCAAWE,KAAX,MAAkBa,aAAa,CAAEV,MAAM,CAACG,OAAxC,GACH,CAED,QAAS,MAAON,CAAAA,KAAP,CAtBb,CA2BH,CA5BM","sourcesContent":["import {CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD} from \"../constants/cartConstants\"\n\n// This cartReducer didnot deal with Server and backend\n\nexport const cartReducer = (state = {cartItems: [], shippingAddress : {}} , action) => {\n    switch(action.type) {\n        case CART_ADD_ITEM    : {\n            const item = action.payload  // this contains the information about what I want to buy\n            // this contains the information about what I have in the cart already\n            const existItem = state.cartItems.find(x => x.product === item.product)\n//          return the first item that matches the criteria\n            if (existItem) {\n                return {...state, \n                    cartItems: state.cartItems.map(x => x.product === item.product? item : x )} // replace with payload or use the old one\n            } else {return {...state, cartItems: [...state.cartItems, item]}}\n\n        }\n        case CART_REMOVE_ITEM : {\n            return {...state, cartItems: state.cartItems.filter(x => x.product !== action.payload)}\n        }\n        case CART_SAVE_SHIPPING_ADDRESS : {\n            return {...state, shippingAddress: action.payload}\n        }\n        case CART_SAVE_PAYMENT_METHOD : {\n            return {...state, paymentMethod: action.payload}\n        }\n\n        default: return state\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}