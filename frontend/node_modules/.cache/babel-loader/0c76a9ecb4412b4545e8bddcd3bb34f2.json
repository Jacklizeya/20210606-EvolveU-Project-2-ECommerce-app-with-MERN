{"ast":null,"code":"var _jsxFileName = \"C:\\\\DATA\\\\EvolveU\\\\PROJECT II\\\\Project2ECommerce\\\\frontend\\\\src\\\\screens\\\\UserEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, updateUsers } from \"../actions/userAction\";\nimport FormContainer from \"../components/FormContainer\";\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserEditScreen({\n  match,\n  history\n}) {\n  _s();\n\n  //  This is going to focus on using local state\n  const userId = match.params.id;\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false); // This is the main global state for this component: userDetails\n\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userUpdate = useSelector(state => state.userUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = userUpdate;\n  console.log(\"user\", user); //  this is side effect, something else needs to be updated too\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: USER_UPDATE_PROFILE_RESET\n      });\n      history.push(\"/admin/Userlist\");\n    } else {\n      if (!user.name || user._id !== userId) {\n        dispatch(getUserDetails(userId));\n        console.log(\"useEffect\", user);\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [user, dispatch, history, userId, successUpdate]); //  this is direct effect, dispatch update\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateUsers({\n      _id: userId,\n      name,\n      email,\n      isAdmin\n    }));\n  }; //  all stuff inside is the children\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      className: \"btn btn-light my-3\",\n      children: \" Go Back \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Edit User \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 18\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 35\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: [\" \", error.update, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 27\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: [\" \", error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 56\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Name \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter name\",\n            value: name,\n            onChange: e => {\n              setName(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \" Email Address \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => {\n              setEmail(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isAdmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"isAdmin\",\n            checked: isAdmin,\n            onChange: e => {\n              setIsAdmin(e.target.checked);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \" Update \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserEditScreen, \"iYZ+BPBGNn2YcoSA87CaLHv1AJo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditScreen\");","map":{"version":3,"sources":["C:/DATA/EvolveU/PROJECT II/Project2ECommerce/frontend/src/screens/UserEditScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","useDispatch","useSelector","Message","Loader","getUserDetails","updateUsers","FormContainer","USER_UPDATE_PROFILE_RESET","UserEditScreen","match","history","userId","params","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","loading","error","user","userUpdate","loadingUpdate","errorUpdate","success","successUpdate","console","log","type","push","_id","submitHandler","e","preventDefault","update","target","value","checked"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {Form, Button} from \"react-bootstrap\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport Message from \"../components/Message\"\r\nimport Loader from \"../components/Loader\"\r\nimport {getUserDetails, updateUsers} from \"../actions/userAction\"\r\nimport FormContainer from \"../components/FormContainer\"\r\nimport {USER_UPDATE_PROFILE_RESET} from \"../constants/userConstant\"\r\n\r\nexport default function UserEditScreen( {match, history} ) {\r\n//  This is going to focus on using local state\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    // This is the main global state for this component: userDetails\r\n    const dispatch = useDispatch()\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {loading, error, user} = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const {loading: loadingUpdate, error: errorUpdate, success: successUpdate} = userUpdate\r\n    console.log(\"user\", user)\r\n    \r\n//  this is side effect, something else needs to be updated too\r\n    useEffect(()=>{\r\n        if (successUpdate) {dispatch({type: USER_UPDATE_PROFILE_RESET}); history.push(\"/admin/Userlist\")} else {\r\n            if (! user.name || user._id !==userId ) \r\n            {dispatch(getUserDetails( userId )); console.log(\"useEffect\", user)} else {\r\n            setName(user.name)\r\n            setEmail(user.email)\r\n            setIsAdmin(user.isAdmin)}}\r\n    }, [user, dispatch, history, userId, successUpdate])\r\n\r\n//  this is direct effect, dispatch update\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()       \r\n        dispatch(updateUsers({_id: userId, name, email, isAdmin}))\r\n    }\r\n\r\n//  all stuff inside is the children\r\n    return (\r\n\r\n        <div>\r\n            \r\n            <Link to= \"/admin/userlist\" className=\"btn btn-light my-3\"> Go Back </Link>\r\n            <FormContainer>\r\n                 <h1> Edit User </h1>\r\n                {loadingUpdate && <Loader> </Loader>}\r\n                {errorUpdate && <Message variant=\"danger\"> {error.update} </Message>}\r\n                {loading? <Loader> </Loader> : error?( <Message variant=\"danger\"> {error} </Message>) :  (\r\n\r\n                <Form onSubmit = {submitHandler} >\r\n\r\n                <Form.Group controlId=\"name\">\r\n                    <Form.Label> Name </Form.Label>\r\n                    <Form.Control type=\"name\" placeholder=\"Enter name\" value={name} onChange={(e)=>{setName(e.target.value)}}/> \r\n                </Form.Group> \r\n\r\n                <Form.Group controlId=\"email\">\r\n                    <Form.Label> Email Address </Form.Label>\r\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" value={email} onChange={(e)=>{setEmail(e.target.value)}}/> \r\n                </Form.Group> \r\n\r\n                <Form.Group controlId=\"isAdmin\">\r\n                    <Form.Check type=\"checkbox\"  label=\"isAdmin\" checked={isAdmin} onChange={(e)=>{setIsAdmin(e.target.checked)}}/> \r\n                </Form.Group>  \r\n\r\n                <Button type=\"submit\" variant=\"primary\"> Update </Button>\r\n                </Form>\r\n            )}\r\n            \r\n\r\n            \r\n             </FormContainer>\r\n        </div>\r\n        \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}