{"ast":null,"code":"import { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_ALL_REQUEST, ORDER_LIST_ALL_SUCCESS, ORDER_LIST_ALL_FAIL, ORDER_DELIVER_REQUEST, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_FAIL } from \"../constants/orderConstants\";\nimport axios from \"axios\";\nexport const createOrder = order => async (dispatch, getState) => {\n  console.log(\"Entering Thunk\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    console.log(`userInfo`, userInfo);\n    console.log(\"order is\", order);\n    console.log(\"token\", userInfo.token); // can I try useSelector here instead of getState? no, this is a function, not React Component\n    // that is why I have to use GetState to get more info\n    // Make real request to database\n\n    const {\n      data\n    } = await axios.post(\"/api/orders\", order, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  console.log(\"Entering Thunk\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // can I try useSelector here instead of getState? no, this is a function, not React Component\n    // that is why I have to use GetState to get more info\n    // Make real request to database\n\n    const {\n      data\n    } = await axios.get(`/api/orders/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n  console.log(\"Entering Pay Order\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_PAY_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // Update backend server record\n\n    const {\n      data\n    } = await axios.put(`/api/orders/${orderId}/pay`, paymentResult, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listMyOrders = () => async (dispatch, getState) => {\n  console.log(\"Entering Pay Order\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_LIST_MY_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // Update backend server record\n\n    const {\n      data\n    } = await axios.get(\"/api/orders/myorders\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_LIST_MY_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_LIST_MY_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listAllOrders = () => async (dispatch, getState) => {\n  console.log(\"Entering Pay Order\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_LIST_ALL_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // Update backend server record\n\n    const {\n      data\n    } = await axios.get(\"/api/orders\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_LIST_ALL_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_LIST_ALL_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deliverOrder = order => async (dispatch, getState) => {\n  console.log(\"Entering DELIVER Order\");\n\n  try {\n    // Initiate request\n    console.log(\"entering the try path\");\n    dispatch({\n      type: ORDER_DELIVER_REQUEST\n    });\n    console.log(\"1st dispatch sent\"); // This is double destruction\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); // Update backend server record\n\n    const {\n      data\n    } = await axios.get(`/api/orders/${order._Id}/deliver`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${userInfo.token}`\n      }\n    });\n    console.log(\"reply from database\", data);\n    dispatch({\n      type: ORDER_DELIVER_SUCCESS,\n      payload: data\n    });\n    console.log(\"I updated Redux state\");\n  } catch (error) {\n    console.log(\"entering error path\");\n    dispatch({\n      type: ORDER_DELIVER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/jack/Desktop/Software Codebase/20210514 E-Commerce Version1/frontend/src/actions/orderAction.js"],"names":["ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","ORDER_LIST_MY_REQUEST","ORDER_LIST_MY_SUCCESS","ORDER_LIST_MY_FAIL","ORDER_LIST_ALL_REQUEST","ORDER_LIST_ALL_SUCCESS","ORDER_LIST_ALL_FAIL","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAIL","axios","createOrder","order","dispatch","getState","console","log","type","userLogin","userInfo","token","data","post","headers","payload","error","response","message","getOrderDetails","id","get","payOrder","orderId","paymentResult","put","listMyOrders","listAllOrders","deliverOrder","_Id"],"mappings":"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","sourcesContent":["import {\n    ORDER_CREATE_REQUEST, \n    ORDER_CREATE_SUCCESS, \n    ORDER_CREATE_FAIL,\n    ORDER_DETAILS_REQUEST, \n    ORDER_DETAILS_SUCCESS, \n    ORDER_DETAILS_FAIL,\n    ORDER_PAY_REQUEST, \n    ORDER_PAY_SUCCESS, \n    ORDER_PAY_FAIL,\n     \n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL ,\n    ORDER_LIST_ALL_REQUEST,\n    ORDER_LIST_ALL_SUCCESS,\n    ORDER_LIST_ALL_FAIL,\n    ORDER_DELIVER_REQUEST,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    \n} from \"../constants/orderConstants\"\n\nimport axios from \"axios\"\n              \nexport const createOrder = (order) => async (dispatch, getState) => {\n    console.log(\"Entering Thunk\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_CREATE_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n        console.log(`userInfo`, userInfo)\n        console.log(\"order is\" , order)\n        console.log(\"token\", userInfo.token)\n        // can I try useSelector here instead of getState? no, this is a function, not React Component\n        // that is why I have to use GetState to get more info\n        // Make real request to database\n        const {data} = await axios.post(\"/api/orders\", order, {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_CREATE_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_CREATE_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    console.log(\"Entering Thunk\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_DETAILS_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n       \n        // can I try useSelector here instead of getState? no, this is a function, not React Component\n        // that is why I have to use GetState to get more info\n        // Make real request to database\n        const {data} = await axios.get(`/api/orders/${id}` , {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_DETAILS_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_DETAILS_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\nexport const payOrder = (orderId, paymentResult) => async (dispatch, getState) => {\n    console.log(\"Entering Pay Order\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_PAY_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n       \n        // Update backend server record\n        const {data} = await axios.put(`/api/orders/${orderId}/pay`, paymentResult , {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_PAY_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_PAY_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    console.log(\"Entering Pay Order\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_LIST_MY_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n       \n        // Update backend server record\n        const {data} = await axios.get(\"/api/orders/myorders\", {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_LIST_MY_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_LIST_MY_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\nexport const listAllOrders = () => async (dispatch, getState) => {\n    console.log(\"Entering Pay Order\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_LIST_ALL_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n       \n        // Update backend server record\n        const {data} = await axios.get(\"/api/orders\", {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_LIST_ALL_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_LIST_ALL_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    console.log(\"Entering DELIVER Order\")\n    try {\n        // Initiate request\n        console.log(\"entering the try path\")    \n        dispatch({ type: ORDER_DELIVER_REQUEST })\n        console.log(\"1st dispatch sent\")\n        // This is double destruction\n        const  {userLogin: {userInfo}} = getState() \n       \n        // Update backend server record\n        const {data} = await axios.get(`/api/orders/${order._Id}/deliver`, {headers : {\"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${userInfo.token}`}} )\n        console.log(\"reply from database\", data)\n        dispatch({ type: ORDER_DELIVER_SUCCESS, payload : data})\n        console.log(\"I updated Redux state\")\n    } catch (error) {\n        console.log(\"entering error path\")\n        dispatch({type: ORDER_DELIVER_FAIL, payload: error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message})\n    }\n}"]},"metadata":{},"sourceType":"module"}